name: CD Apply Workflow

on:
  workflow_call:
    inputs:
      tf_action:
        required: true
        type: string
      config_path:
        required: true
        type: string
      iac_release_tag:
        required: true
        type: string

jobs:
  extract-env:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.setenv.outputs.env }}
      cloud_provider: ${{ steps.setenv.outputs.cloud_provider }}
    steps:
      - id: setenv
        run: |
          IFS='/' read -r client cloud env <<< "${{ inputs.config_path }}"
          echo "env=$env"
          echo "cloud_provider=$cloud"
          echo "env=$env" >> $GITHUB_OUTPUT
          echo "cloud_provider=$cloud" >> $GITHUB_OUTPUT

  terraform-apply:
    needs: extract-env
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.extract-env.outputs.environment }}
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Checkout cc-client-config-repo
        uses: actions/checkout@v3

      - name: Checkout IAC repo
        uses: actions/checkout@v3
        with:
          repository: sasidaren-coder/github-actions-test
          path: iac
          ref: ${{ inputs.iac_release_tag }}

      - name: Export Terraform Secrets for Environment
        run: |
          echo "TF_VAR_resource_yaml_path=../../${{ inputs.config_path }}/resources.yaml" >> $GITHUB_ENV
          echo "TF_VAR_state_version=${{ inputs.iac_release_tag }}" >> $GITHUB_ENV
          echo "TF_VAR_cloud_provider=${{ needs.extract-env.outputs.cloud_provider }}" >> $GITHUB_ENV
          echo "TF_VAR_azure_confluent_cloud_api_key=${{ vars.AZURE_CONFLUENT_API_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_azure_confluent_cloud_api_secret=${{ secrets.AZURE_CONFLUENT_API_SECRET }}" >> $GITHUB_ENV
          echo "TF_VAR_azure_kafka_cluster_id=${{ vars.AZURE_KAFKA_CLUSTER_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_azure_cc_environment_id=${{ vars.AZURE_CC_ENVIRONMENT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_azure_kafka_rest_endpoint=${{ vars.AZURE_KAFKA_REST_ENDPOINT }}" >> $GITHUB_ENV
          echo "TF_VAR_azure_kafka_api_key=${{ vars.AZURE_KAFKA_API_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_azure_kafka_api_secret=${{ secrets.AZURE_KAFKA_API_SECRET }}" >> $GITHUB_ENV
          echo "TF_VAR_gcp_confluent_cloud_api_key=${{ vars.GCP_CONFLUENT_API_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_gcp_confluent_cloud_api_secret=${{ secrets.GCP_CONFLUENT_API_SECRET }}" >> $GITHUB_ENV
          echo "TF_VAR_gcp_kafka_cluster_id=${{ vars.GCP_KAFKA_CLUSTER_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_gcp_cc_environment_id=${{ vars.GCP_CC_ENVIRONMENT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_gcp_kafka_rest_endpoint=${{ vars.GCP_KAFKA_REST_ENDPOINT }}" >> $GITHUB_ENV
          echo "TF_VAR_gcp_kafka_api_key=${{ vars.GCP_KAFKA_API_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_gcp_kafka_api_secret=${{ secrets.GCP_KAFKA_API_SECRET }}" >> $GITHUB_ENV
          echo "TF_VAR_aws_confluent_cloud_api_key=${{ vars.AWS_CONFLUENT_API_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_aws_confluent_cloud_api_secret=${{ secrets.AWS_CONFLUENT_API_SECRET }}" >> $GITHUB_ENV
          echo "TF_VAR_aws_kafka_cluster_id=${{ vars.AWS_KAFKA_CLUSTER_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_aws_cc_environment_id=${{ vars.AWS_CC_ENVIRONMENT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_aws_kafka_rest_endpoint=${{ vars.AWS_KAFKA_REST_ENDPOINT }}" >> $GITHUB_ENV
          echo "TF_VAR_aws_kafka_api_key=${{ vars.AWS_KAFKA_API_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_aws_kafka_api_secret=${{ secrets.AWS_KAFKA_API_SECRET }}" >> $GITHUB_ENV

      - name: Install Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Terraform Init
        working-directory: iac/confluentcloud-resource-provisioner-tf
        run: terraform init

      - name: Terraform Validate
        working-directory: iac/confluentcloud-resource-provisioner-tf
        run: terraform validate

      - name: Terraform Plan
        working-directory: iac/confluentcloud-resource-provisioner-tf
        run: |
          echo "Working Directory: $(pwd)"
          echo "Listing Files: $(ls -ltr ../..)"
          terraform plan

      - name: Terraform Apply
        working-directory: iac/confluentcloud-resource-provisioner-tf
        run: |
          terraform apply -auto-approve

      - name: Get Terraform state version
        run: terraform output state_version